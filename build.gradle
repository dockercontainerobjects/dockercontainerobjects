buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2' }
        jcenter()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayPluginVersion}"
        classpath "com.netflix.nebula:gradle-resolution-rules-plugin:${nebulaResolutionRulesPluginVersion}"
        classpath "com.netflix.nebula:nebula-dependency-recommender:${nebulaDependencyRecommenderPluginVersion}"
        classpath "com.netflix.nebula:nebula-project-plugin:${nebulaProjectPluginVersion}"
        classpath "com.netflix.nebula:nebula-release-plugin:${nebulaReleasePluginVersion}"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${errorPronePluginVersion}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformPluginVersion}"
        classpath "org.xtext:xtext-gradle-plugin:${xtendPluginVersion}"
    }
}

allprojects {
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.nebula-release'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'nebula.maven-apache-license'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'nebula.resolution-rules'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'org.xtext.xtend'

    ext {
        projectId = rootProject.name
        projectName = rootProject.description

        githubOrgId = projectId
        githubProjectRepo = githubOrgId + '/' + projectId
        githubProjectUrl = 'https://github.com/' + githubProjectRepo
        githubProjectScmUrl = githubProjectUrl + '.git'
        githubProjectIssuesUrl = githubProjectUrl + '/issues'

        bintrayOrgId = projectId
        bintrayRepo = 'maven'
        bintrayName = project.name
    }

    contacts {
        'rivasdiaz@gmail.com' {
            moniker 'Ramon Rivas'
            github 'rivasdiaz'
            twitter 'rivasdiaz'
            roles ['committer']
        }
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        jcenter()
    }

    xtend {
        generator {
            javaSourceLevel = javaVersion
            suppressWarningsAnnotation = true
            generatedAnnotation {
                active = true
                includeDate = false
            }
        }
        debugger {
            sourceInstaller = 'SMAP'
            hideSyntheticVariables = true
        }
        validator {
        }
    }

    dependencyRecommendations {
        map recommendations: [
                // Xtend
                'org.eclipse.xtend:org.eclipse.xtend.lib': project.xtendVersion,
                // Javax Inject
                'javax.inject:javax.inject': project.javaxInjectVersion,
                // Docker Java
                'com.github.docker-java:docker-java': project.dockerJavaVersion,
                // Logging: SLF4J + Logback
                'org.slf4j:slf4j-api': project.slf4jVersion,
                'ch.qos.logback:logback-classic': project.logbackVersion,
                // JUnit
                'junit:junit': project.junitClassicVersion,
                'org.junit.platform:junit-platform-runner': project.junitPlatformVersion,
                'org.junit.jupiter:junit-jupiter-api': project.junitJupiterVersion,
                'org.junit.jupiter:junit-jupiter-engine': project.junitJupiterVersion,
                'org.junit.vintage:junit-vintage-engine': project.junitVintageVersion,
        ]
    }

    dependencies {
        resolutionRules files("${rootProject.projectDir}/src/main/rules/exclude-log4j.json")
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['nebula']
        dryRun = false
        pkg {
            repo = project.bintrayRepo
            name = project.bintrayName
            userOrg = project.bintrayOrgId
            licenses = ['Apache-2.0']
            websiteUrl = project.githubProjectUrl
            vcsUrl = project.githubProjectScmUrl
            issueTrackerUrl = project.githubProjectIssuesUrl
            githubRepo = project.githubProjectRepo
            githubReleaseNotesFile = 'README.md'
            publicDownloadNumbers = true
            version {
                name = project.version
                released = new Date()
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
